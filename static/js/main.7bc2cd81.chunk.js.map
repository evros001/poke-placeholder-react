{"version":3,"sources":["stylesheets/Post.module.css","stylesheets/PokemonCard.module.css","stylesheets/PokemonList.module.css","stylesheets/PostsList.module.css","stylesheets/Lists.module.css","components/cards/PokemonCard.js","components/PokemonList.js","components/cards/PostCard.js","components/PostsList.js","components/Lists.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PokemonCard","props","useState","setPokemonImg","useEffect","a","fetch","overviewUrl","res","json","data","sprites","front_default","fetchImg","PokemonList","pokemonListData","setPokemonListData","results","fetchApi","className","styles","container","title","map","obj","index","key","url","pokemonName","name","PostCard","postTitle","body","postCopy","PostsList","postListData","setPostListData","id","Lists","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2HACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,MAAQ,oBAAoB,KAAO,qB,gBCAzFD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,MAAQ,6B,gBCArED,EAAOC,QAAU,CAAC,UAAY,+BAA+B,MAAQ,6B,gBCArED,EAAOC,QAAU,CAAC,UAAY,6BAA6B,MAAQ,2B,gBCAnED,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,uB,gMC4BhDC,MA1Bf,SAAqBC,GAAQ,IAAD,EACUC,mBAAS,MADnB,mBACPC,GADO,WAG1BC,qBAAU,WAAM,4CAGd,8BAAAC,EAAA,sEACoBC,MAAM,GAAD,OAAIL,EAAMM,cADnC,cACQC,EADR,gBAEqBA,EAAIC,OAFzB,OAEQC,EAFR,OAGEP,EAAcO,EAAKC,QAAQC,eAH7B,4CAHc,0DASdC,KACC,K,gBCiBUC,MA7Bf,WAAuB,MAEyBZ,mBAAS,MAFlC,mBAEda,EAFc,KAEGC,EAFH,KAgBrB,OAVAZ,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACoBC,MAAM,8CAD1B,cACQE,EADR,gBAEqBA,EAAIC,OAFzB,OAEQC,EAFR,OAGEM,EAAmBN,EAAKO,SAH1B,4CADc,uBAAC,WAAD,wBAOdC,KACC,IAGD,6BAASC,UAAWC,IAAOC,WACvB,wBAAIF,UAAWC,IAAOE,OAAtB,WACCP,GAAmBA,EAAgBQ,KAAI,SAACC,EAAKC,GAC5C,OAAO,kBAAC,EAAD,CACLC,IAAKD,EACLlB,YAAaiB,EAAIG,IACjBC,YAAaJ,EAAIK,Y,gBCZdC,MAZf,SAAkB7B,GAIhB,OACE,6BAASkB,UAAWC,IAAOC,WACzB,wBAAIF,UAAWC,IAAOE,OAAQrB,EAAM8B,WACpC,uBAAGZ,UAAWC,IAAOY,MAAO/B,EAAMgC,Y,gBCsBzBC,MA5Bf,WAAqB,MAEqBhC,mBAAS,MAF9B,mBAEZiC,EAFY,KAEEC,EAFF,KAenB,OAXAhC,qBAAU,WAAM,4CAEd,8BAAAC,EAAA,sEACoBC,MAAM,wDAD1B,cACQE,EADR,gBAEqBA,EAAIC,OAFzB,OAEQC,EAFR,OAGE0B,EAAgB1B,GAHlB,4CAFc,0DAQdQ,KACC,IAGD,6BAASC,UAAWC,IAAOC,WACvB,wBAAIF,UAAWC,IAAOE,OAAtB,cACCa,GAAgBA,EAAaZ,KAAI,SAAAC,GAChC,OAAO,kBAAC,EAAD,CACLE,IAAKF,EAAIa,GACTN,UAAWP,EAAIF,MACfW,SAAUT,EAAIQ,Y,gBCLXM,MAbf,WAEE,OACE,6BACE,wBAAInB,UAAWC,IAAOE,OAAtB,0BACA,6BAASH,UAAWC,IAAOC,WACzB,kBAAC,EAAD,MACA,kBAAC,EAAD,S,MCHOkB,MARf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,QCKcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7bc2cd81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Post_container__qmlVI\",\"title\":\"Post_title__2HFn0\",\"body\":\"Post_body__Ngja1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PokemonCard_container__3P6tL\",\"title\":\"PokemonCard_title__fTM21\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PokemonList_container__3MkgK\",\"title\":\"PokemonList_title__2YJxA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PostsList_container__TnTLL\",\"title\":\"PostsList_title__y0_87\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Lists_container__5ka8h\",\"title\":\"Lists_title__1QL_X\"};","import React, { useState, useEffect } from 'react';\nimport styles from '../../stylesheets/PokemonCard.module.css'\n\nfunction PokemonCard(props) {\n  const [pokemonImg, setPokemonImg] = useState(null)\n\n  useEffect(() => {\n    // have to make another api call here beacsue previous data only supplies the correlated url\n    // same async immediate function call as before\n    async function fetchImg() {\n      const res = await fetch(`${props.overviewUrl}`)\n      const data = await res.json();\n      setPokemonImg(data.sprites.front_default);\n    }\n\n    fetchImg();\n  }, []);\n\n  return (\n    // make sure we display only when list data is available hence the && conditional\n    <article className={styles.container}>\n      <h2 className={styles.title}>{props.pokemonName}</h2>\n      {pokemonImg &&\n        <img src={pokemonImg} alt={props.pokemonName} />\n      }\n    </article>\n  );\n}\n\nexport default PokemonCard;","import React, { useState, useEffect } from 'react';\nimport PokemonCard from './cards/PokemonCard';\nimport styles from '../stylesheets/PokemonList.module.css'\n\nfunction PokemonList() {\n  // create value in state specific and set initialise to null so that conditional will fail if no data\n  const [pokemonListData, setPokemonListData] = useState(null)\n\n  // fetch data and convert to json with useEffect essentially replacing lifecycle methods\n  // seperate async call as own function and call immedialty\n  useEffect(() => {\n    async function fetchApi() {\n      const res = await fetch('https://pokeapi.co/api/v2/pokemon?limit=50')\n      const data = await res.json();\n      setPokemonListData(data.results);\n    }\n\n    fetchApi();\n  }, []);\n\n  return (\n    <section className={styles.container}>\n        <h2 className={styles.title}>Pokemon</h2>\n        {pokemonListData && pokemonListData.map((obj, index) => {\n          return <PokemonCard \n            key={index}\n            overviewUrl={obj.url}\n            pokemonName={obj.name} />\n        })}\n    </section>\n  );\n}\n\nexport default PokemonList;","import React from 'react';\nimport styles from '../../stylesheets/Post.module.css'\n\nfunction PostCard(props) {\n\n  // simple card component with no added logic needed and no use for hooks\n\n  return (\n    <article className={styles.container}>\n      <h2 className={styles.title}>{props.postTitle}</h2>\n      <p className={styles.body}>{props.postCopy}</p>\n    </article>\n  );\n}\n\nexport default PostCard;","import React, { useState, useEffect } from 'react';\nimport PostCard from './cards/PostCard';\nimport styles from '../stylesheets/PostsList.module.css'\n\nfunction PostsList() {\n  // set state post value initialize to null\n  const [postListData, setPostListData] = useState(null)\n\n  useEffect(() => {\n    // fetch data asynch and call function immedaitly\n    async function fetchApi() {\n      const res = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=10')\n      const data = await res.json();\n      setPostListData(data);\n    }\n\n    fetchApi();\n  }, []);\n\n  return (\n    <section className={styles.container}>\n        <h2 className={styles.title}>Blog Posts</h2>\n        {postListData && postListData.map(obj => {\n          return <PostCard\n            key={obj.id}\n            postTitle={obj.title}\n            postCopy={obj.body} />\n        })}\n    </section>\n  );\n}\n\nexport default PostsList;","import React from 'react';\nimport PokemonList from './PokemonList';\nimport PostsList from './PostsList';\nimport styles from '../stylesheets/Lists.module.css'\n\n// using module styles beacsue there are few containers \n// and changes can happen per modules instead of nesting layers readability and cleanliness \n\nfunction Lists() {\n  // organize lists as own components in ways that feel natural, in this case pokemon and posts\n  return (\n    <div>\n      <h1 className={styles.title}>Blog Posts and Pokemon</h1>\n      <section className={styles.container}>\n        <PostsList />\n        <PokemonList />\n      </section>\n    </div>\n  );\n}\n\nexport default Lists;\n","import React from 'react';\nimport Lists from './components/Lists'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Lists />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}